name: Terraform

on:
  workflow_run:
    workflows: ['Run pre-commit on push']
    types:
      - completed
    branches:
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: '838419074361'
  AWS_REGION: 'us-east-2'
  TF_VERSION: '1.10.5'
  TF_WORKING_DIR: './terraform'

jobs:
  terraform-check:
    name: Terraform Validation & Security
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AWS Authenticate (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc'
          aws-region: '${{ env.AWS_REGION }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      # Security scanning for Terraform
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ${{ env.TF_WORKING_DIR }}
          framework: terraform
          output_format: sarif
          output_file_path: terraform-checkov.sarif
        continue-on-error: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('terraform-checkov.sarif') != ''
        with:
          sarif_file: terraform-checkov.sarif
        continue-on-error: true

      # TFSec security scanning
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ${{ env.TF_WORKING_DIR }}
          soft_fail: true
        continue-on-error: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AWS Authenticate (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc'
          aws-region: '${{ env.AWS_REGION }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          NETLIFY_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          NETLIFY_API_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            const body = `## Terraform Plan üèóÔ∏è

            <details>
            <summary>Show Plan</summary>

            \`\`\`terraform
            ${plan}
            \`\`\`

            </details>

            **Plan Summary:**
            - üìù Plan generated successfully
            - üîç Review changes before merging
            - üöÄ Apply will run on merge to main
            `;

            // Split the body into chunks if it's too large
            const chunks = chunkSubstr(body, maxGitHubBodyCharacters);

            for (let i = 0; i < chunks.length; i++) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: i === 0 ? chunks[i] : `## Terraform Plan (continued ${i + 1}/${chunks.length})\n\n${chunks[i]}`
              });
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: prd

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AWS Authenticate (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc'
          aws-region: '${{ env.AWS_REGION }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          NETLIFY_API_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
        run: terraform apply -auto-approve

      - name: Terraform Output
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "## Terraform Apply Results üöÄ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Site Information:" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL:** $(terraform output -raw site_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin URL:** $(terraform output -raw admin_url)" >> $GITHUB_STEP_SUMMARY
          echo "- **Site ID:** $(terraform output -raw site_id)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status:" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Infrastructure deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Netlify site configured" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Security headers applied" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Redirects configured" >> $GITHUB_STEP_SUMMARY
